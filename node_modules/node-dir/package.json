{
  "_args": [
    [
      {
        "raw": "node-dir@0.1.8",
        "scope": null,
        "escapedName": "node-dir",
        "name": "node-dir",
        "rawSpec": "0.1.8",
        "spec": "0.1.8",
        "type": "version"
      },
      "/Users/ebui91/Projects/react-without-cra/node_modules/jscodeshift"
    ]
  ],
  "_from": "node-dir@0.1.8",
  "_id": "node-dir@0.1.8",
  "_inCache": true,
  "_location": "/node-dir",
  "_nodeVersion": "0.12.2",
  "_npmUser": {
    "name": "fshost",
    "email": "fshost@yahoo.com"
  },
  "_npmVersion": "2.7.4",
  "_phantomChildren": {},
  "_requested": {
    "raw": "node-dir@0.1.8",
    "scope": null,
    "escapedName": "node-dir",
    "name": "node-dir",
    "rawSpec": "0.1.8",
    "spec": "0.1.8",
    "type": "version"
  },
  "_requiredBy": [
    "/jscodeshift",
    "/webpack-addons/jscodeshift"
  ],
  "_resolved": "https://registry.npmjs.org/node-dir/-/node-dir-0.1.8.tgz",
  "_shasum": "55fb8deb699070707fb67f91a460f0448294c77d",
  "_shrinkwrap": null,
  "_spec": "node-dir@0.1.8",
  "_where": "/Users/ebui91/Projects/react-without-cra/node_modules/jscodeshift",
  "author": {
    "name": "Nathan Cartwright",
    "email": "fshost@yahoo.com",
    "url": "https://github.com/fshost"
  },
  "bugs": {
    "url": "https://github.com/fshost/node-dir/issues"
  },
  "dependencies": {},
  "description": "asynchronous file and directory operations for Node.js",
  "devDependencies": {
    "mocha": "~1.13.0",
    "should": "~2.0.2"
  },
  "directories": {
    "lib": "lib"
  },
  "dist": {
    "shasum": "55fb8deb699070707fb67f91a460f0448294c77d",
    "tarball": "https://registry.npmjs.org/node-dir/-/node-dir-0.1.8.tgz"
  },
  "engines": {
    "node": ">= 0.10.5"
  },
  "gitHead": "6f3f24563d551ae39501f0acbe949d85e6ad528f",
  "homepage": "https://github.com/fshost",
  "keywords": [
    "node-dir",
    "directory",
    "dir",
    "subdir",
    "file",
    "asynchronous",
    "Node.js",
    "fs"
  ],
  "licenses": [
    "MIT"
  ],
  "main": "index",
  "maintainers": [
    {
      "name": "fshost",
      "email": "fshost@yahoo.com"
    }
  ],
  "name": "node-dir",
  "optionalDependencies": {},
  "readme": "[![Build Status](https://secure.travis-ci.org/fshost/node-dir.png)](http://travis-ci.org/fshost/node-dir)\r\n\r\n# node-dir\r\nA lightweight Node.js module with methods for some common directory and file operations, including asynchronous, non-blocking methods for recursively getting an array of files, subdirectories, or both, and methods for recursively, sequentially reading and processing the contents of files in a directory and its subdirectories, with several options available for added flexibility if needed.\r\n\r\n#### installation\r\n\r\n    npm install node-dir\r\n\r\n#### methods\r\nFor the sake of brevity, assume that the following line of code precedes all of the examples.\r\n\r\n```javascript\r\nvar dir = require('node-dir');\r\n```\r\n\r\n#### readFiles( dir, [options], fileCallback, [finishedCallback] )\r\nSequentially read the content of each file in a directory, passing the contents to a callback, optionally calling a finished callback when complete.  The options and finishedCallback arguments are not required.\r\n\r\nValid options are:\r\n- encoding: file encoding (defaults to 'utf8')\r\n- exclude: a regex pattern or array to specify filenames to ignore\r\n- excludeDir: a regex pattern or array to specify directories to ignore\r\n- match: a regex pattern or array to specify filenames to operate on\r\n- matchDir: a regex pattern or array to specify directories to recurse \r\n- recursive: whether to recurse subdirectories when reading files (defaults to true)\r\n- reverse: sort files in each directory in descending order\r\n- shortName: whether to aggregate only the base filename rather than the full filepath\r\n- sort: sort files in each directory in ascending order (defaults to true)\r\n\r\nA reverse sort can also be achieved by setting the sort option to 'reverse', 'desc', or 'descending' string value.\r\n\r\nexamples\r\n\r\n```javascript\r\n// display contents of files in this script's directory\r\ndir.readFiles(__dirname,\r\n    function(err, content, next) {\r\n        if (err) throw err;\r\n        console.log('content:', content);\r\n        next();\r\n    },\r\n    function(err, files){\r\n        if (err) throw err;\r\n        console.log('finished reading files:', files);\r\n    });\r\n\r\n// match only filenames with a .txt extension and that don't start with a `.Â´\r\ndir.readFiles(__dirname, {\r\n    match: /.txt$/,\r\n    exclude: /^\\./\r\n    }, function(err, content, next) {\r\n        if (err) throw err;\r\n        console.log('content:', content);\r\n        next();\r\n    },\r\n    function(err, files){\r\n        if (err) throw err;\r\n        console.log('finished reading files:',files);\r\n    });\r\n\r\n// exclude an array of subdirectory names\r\ndir.readFiles(__dirname, {\r\n    exclude: ['node_modules', 'test']\r\n    }, function(err, content, next) {\r\n        if (err) throw err;\r\n        console.log('content:', content);\r\n        next();\r\n    },\r\n    function(err, files){\r\n        if (err) throw err;\r\n        console.log('finished reading files:',files);\r\n    });\r\n\r\n\r\n// the callback for each file can optionally have a filename argument as its 3rd parameter\r\n// and the finishedCallback argument is optional, e.g.\r\ndir.readFiles(__dirname, function(err, content, filename, next) {\r\n        console.log('processing content of file', filename);\r\n        next();\r\n    });\r\n```\r\n\r\n        \r\n#### files( dir, callback )\r\nAsynchronously iterate the files of a directory and its subdirectories and pass an array of file paths to a callback.\r\n    \r\n```javascript\r\ndir.files(__dirname, function(err, files) {\r\n    if (err) throw err;\r\n    console.log(files);\r\n});\r\n```\r\n\r\nNote that for the files and subdirs the object returned is an array, and thus all of the standard array methods are available for use in your callback for operations like filters or sorting. Some quick examples:\r\n\r\n```javascript\r\ndir.files(__dirname, function(err, files) {\r\n    if (err) throw err;\r\n    // sort ascending\r\n    files.sort();\r\n    // sort descending\r\n    files.reverse();\r\n    // include only certain filenames\r\n    files = files.filter(function (file) {\r\n       return ['allowed', 'file', 'names'].indexOf(file) > -1;\r\n    });\r\n    // exclude some filenames\r\n    files = files.filter(function (file) {\r\n        return ['exclude', 'these', 'files'].indexOf(file) === -1;\r\n    });\r\n});\r\n```\r\n\r\nAlso note that if you need to work with the contents of the files asynchronously, please use the readFiles method.  The files and subdirs methods are for getting a list of the files or subdirs in a directory as an array.\r\n        \r\n#### subdirs( dir, callback )\r\nAsynchronously iterate the subdirectories of a directory and its subdirectories and pass an array of directory paths to a callback.\r\n\r\n```javascript\r\ndir.subdirs(__dirname, function(err, subdirs) {\r\n    if (err) throw err;\r\n    console.log(subdirs);\r\n});\r\n```\r\n\r\n#### paths(dir, [combine], callback )\r\nAsynchronously iterate the subdirectories of a directory and its subdirectories and pass an array of both file and directory paths to a callback.\r\n\r\nSeparated into two distinct arrays (paths.files and paths.dirs)\r\n\r\n```javascript\r\ndir.paths(__dirname, function(err, paths) {\r\n    if (err) throw err;\r\n    console.log('files:\\n',paths.files);\r\n    console.log('subdirs:\\n', paths.dirs);\r\n});\r\n```\r\n\r\n\r\nCombined in a single array (convenience method for concatenation of the above)\r\n\r\n```javascript\r\ndir.paths(__dirname, true, function(err, paths) {\r\n    if (err) throw err;\r\n    console.log('paths:\\n',paths);\r\n});\r\n```\r\n\r\n\r\n## License\r\nMIT licensed (See LICENSE.txt)\r\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/fshost/node-dir.git"
  },
  "scripts": {
    "test": "mocha --reporter spec"
  },
  "version": "0.1.8"
}
