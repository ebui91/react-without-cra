{
  "_args": [
    [
      {
        "raw": "dargs@^5.1.0",
        "scope": null,
        "escapedName": "dargs",
        "name": "dargs",
        "rawSpec": "^5.1.0",
        "spec": ">=5.1.0 <6.0.0",
        "type": "range"
      },
      "/Users/ebui91/Projects/react-without-cra/node_modules/yeoman-generator"
    ]
  ],
  "_from": "dargs@>=5.1.0 <6.0.0",
  "_id": "dargs@5.1.0",
  "_inCache": true,
  "_location": "/dargs",
  "_nodeVersion": "4.5.0",
  "_npmOperationalInternal": {
    "host": "packages-16-east.internal.npmjs.com",
    "tmp": "tmp/dargs-5.1.0.tgz_1474564238125_0.8079354558140039"
  },
  "_npmUser": {
    "name": "sindresorhus",
    "email": "sindresorhus@gmail.com"
  },
  "_npmVersion": "3.10.7",
  "_phantomChildren": {},
  "_requested": {
    "raw": "dargs@^5.1.0",
    "scope": null,
    "escapedName": "dargs",
    "name": "dargs",
    "rawSpec": "^5.1.0",
    "spec": ">=5.1.0 <6.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/yeoman-generator"
  ],
  "_resolved": "https://registry.npmjs.org/dargs/-/dargs-5.1.0.tgz",
  "_shasum": "ec7ea50c78564cd36c9d5ec18f66329fade27829",
  "_shrinkwrap": null,
  "_spec": "dargs@^5.1.0",
  "_where": "/Users/ebui91/Projects/react-without-cra/node_modules/yeoman-generator",
  "author": {
    "name": "Sindre Sorhus",
    "email": "sindresorhus@gmail.com",
    "url": "sindresorhus.com"
  },
  "bugs": {
    "url": "https://github.com/sindresorhus/dargs/issues"
  },
  "dependencies": {},
  "description": "Reverse minimist. Convert an object of options into an array of command-line arguments.",
  "devDependencies": {
    "ava": "*",
    "xo": "*"
  },
  "directories": {},
  "dist": {
    "shasum": "ec7ea50c78564cd36c9d5ec18f66329fade27829",
    "tarball": "https://registry.npmjs.org/dargs/-/dargs-5.1.0.tgz"
  },
  "engines": {
    "node": ">=4"
  },
  "files": [
    "index.js"
  ],
  "gitHead": "6f796ea830d0a6b1d75592f6c28ac619339f2965",
  "homepage": "https://github.com/sindresorhus/dargs#readme",
  "keywords": [
    "reverse",
    "minimist",
    "options",
    "arguments",
    "args",
    "flags",
    "cli",
    "nopt",
    "commander",
    "bin",
    "binary",
    "command",
    "cmd",
    "inverse",
    "opposite",
    "invert",
    "switch",
    "construct",
    "parse",
    "parser",
    "argv"
  ],
  "license": "MIT",
  "maintainers": [
    {
      "name": "sindresorhus",
      "email": "sindresorhus@gmail.com"
    },
    {
      "name": "kevva",
      "email": "kevinmartensson@gmail.com"
    }
  ],
  "name": "dargs",
  "optionalDependencies": {},
  "readme": "# dargs [![Build Status](https://travis-ci.org/sindresorhus/dargs.svg?branch=master)](https://travis-ci.org/sindresorhus/dargs)\n\n> Reverse [`minimist`](https://github.com/substack/minimist). Convert an object of options into an array of command-line arguments.\n\nUseful when spawning command-line tools.\n\n\n## Install\n\n```\n$ npm install --save dargs\n```\n\n\n## Usage\n\n```js\nconst dargs = require('dargs');\n\nconst input = {\n\t_: ['some', 'option'],          // values in '_' will be appended to the end of the generated argument list\n\tfoo: 'bar',\n\thello: true,                    // results in only the key being used\n\tcake: false,                    // prepends `no-` before the key\n\tcamelCase: 5,                   // camelCase is slugged to `camel-case`\n\tmultiple: ['value', 'value2'],  // converted to multiple arguments\n\tpieKind: 'cherry',\n\tsad: ':('\n};\n\nconst excludes = ['sad', /.*Kind$/];  // excludes and includes accept regular expressions\nconst includes = ['camelCase', 'multiple', 'sad', /^pie.*/];\nconst aliases = {file: 'f'};\n\nconsole.log(dargs(input, {excludes}));\n/*\n[\n\t'--foo=bar',\n\t'--hello',\n\t'--no-cake',\n\t'--camel-case=5',\n\t'--multiple=value',\n\t'--multiple=value2',\n\t'some',\n\t'option'\n]\n*/\n\nconsole.log(dargs(input, {excludes, includes}));\n/*\n[\n\t'--camel-case=5',\n\t'--multiple=value',\n\t'--multiple=value2'\n]\n*/\n\n\nconsole.log(dargs(input, {includes}));\n/*\n[\n\t'--camel-case=5',\n\t'--multiple=value',\n\t'--multiple=value2',\n\t'--pie-kind=cherry',\n\t'--sad=:('\n]\n*/\n\n\nconsole.log(dargs({\n\tfoo: 'bar',\n\thello: true,\n\tfile: 'baz'\n}, {aliases}));\n/*\n[\n\t'--foo=bar',\n\t'--hello',\n\t'-f', 'baz'\n]\n*/\n```\n\n\n## API\n\n### dargs(input, [options])\n\n#### input\n\nType: `Object`\n\nObject to convert to command-line arguments.\n\n#### options\n\nType: `Object`\n\n##### excludes\n\nType: `Array`\n\nKeys or regex of keys to exclude. Takes precedence over `includes`.\n\n##### includes\n\nType: `Array`\n\nKeys or regex of keys to include.\n\n##### aliases\n\nType: `Object`\n\nMaps keys in `input` to an aliased name. Matching keys are converted to arguments with a single dash (`-`) in front of the aliased key and the value in a separate array item. Keys are still affected by `includes` and `excludes`.\n\n##### useEquals\n\nType: `boolean`<br>\nDefault: `true`\n\nSetting this to `false` makes it return the key and value as separate array items instead of using a `=` separator in one item. This can be useful for tools that doesn't support `--foo=bar` style flags.\n\n###### Example\n\n```js\nconsole.log(dargs({foo: 'bar'}, {useEquals: false}));\n/*\n[\n\t'--foo', 'bar'\n]\n*/\n```\n\n##### ignoreFalse\n\nType: `boolean`<br>\nDefault: `false`\n\nExclude `false` values. Can be useful when dealing with strict argument parsers that throw on unknown arguments like `--no-foo`.\n\n##### allowCamelCase\n\nType: `boolean`<br>\nDefault: `false`\n\nBy default, camelCased keys will be hyphenated. Enabling this will bypass the conversion process.\n\n###### Example\n\n```js\nconsole.log(dargs({fooBar: 'baz'}));\n//=> ['--foo-bar', 'baz']\n\nconsole.log(dargs({fooBar: 'baz'}, {allowCamelCase: true}));\n//=> ['--fooBar', 'baz']\n```\n\n\n## License\n\nMIT Â© [Sindre Sorhus](https://sindresorhus.com)\n",
  "readmeFilename": "readme.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/sindresorhus/dargs.git"
  },
  "scripts": {
    "test": "xo && ava"
  },
  "version": "5.1.0",
  "xo": {
    "esnext": true
  }
}
